<?php
/**
 * @file
 * Charts module file that provides hook_theme.
 */
use \Drupal\Core\Template\Attribute;
use \Drupal\charts\util\Util;

// Store Charts preprocess theme functions in a separate .inc file.
\Drupal::moduleHandler()->loadInclude('charts', 'inc', 'charts.theme');

/**
* Implements hook_theme().
* @param $existing
* @param $type
* @param $theme
* @param $path
* @return array
*/
function charts_theme($existing, $type, $theme, $path) {

  return array(
    'views_view_charts' => array(
      'variables' => array('view' => NULL, 'row' => NULL),
    )
  );
}

function theme_views_view_charts($variables){

    $options = $variables['view']->style_plugin->options;

    $service = \Drupal::service('charts.charts_attachment');
    $attachmentView = $service->getAttachmentView();
    //$service->getAttachmentView();



    $view = $variables['view'];
    $library = $view->style_plugin->options['library'];
    $variables['data'] = array();

    //this view's id
    $viewId = $view->display_handler->display['id'];

    // get id of chart extension
    $attachmentId = $view->display_handler->getAttachedDisplays();



    // gets chart extension
    //$attachmentDisplay = $view->storage->getDisplay($attachmentId[0]);
    $attachmentDisplay = $attachmentView->storage->getDisplay($attachmentId[0]);

    // get attached valuefield
    //$combinedAttachmentPage = array();
    $attachedValueField = $attachmentDisplay['display_options']['style']['options']['data_fields'];
    $combinedAttachmentPage = Util::removeUnselectedFields($attachedValueField);

   /* foreach($attachedValueField as $key => $value) {
        if (!empty($value)){
            $combinedAttachmentPage[$key] = $value;
        }
    }
    */


    $labelField = $view->style_plugin->options['label_field'];
    $valueField = $view->style_plugin->options['data_fields'];

    /*foreach($valueField as $key => $value) {
        if (!empty($value)){
            $combinedAttachmentPage[$key] = $value;
        }
    }*/

    /*foreach($valueField as $fieldId => $rowDataValue) {

        if($rowDataValue == '0')
            unset($valueField[$fieldId]);
    }*/
    $valueField = Util::removeUnselectedFields($valueField);

    $color = $view->style_plugin->options['field_colors'];

    /*$dataAttachment = array();

    foreach ($attachmentView->result as $id => $row) {
        $numberFields = 0;
        $rowData = array();
        foreach($combinedAttachmentPage as $fieldId => $rowDataValue) {
            $rowData[$numberFields] = array(
                'value' => $attachmentView->field[$fieldId]->getValue($row),
                'label_field' => $attachmentView->field[$labelField]->getValue($row),
                'label' => $attachmentView->field[$fieldId]->label(),
                'color' => $color[$fieldId],
            );
            $numberFields++;
        }
        $dataAttachment[$id] = $rowData;
    }*/
    $dataAttachment = Util::viewsData($attachmentView, $combinedAttachmentPage, $labelField, $color);
    $dataAttachment = Util::createChartableData($dataAttachment);
    $categoriesAttachment = $dataAttachment[0];
    $seriesDataAttachment = $dataAttachment[1];

    /*$data = array();

    foreach ($view->result as $id => $row) {
        $numberFields = 0;
        $rowData = array();
        foreach($valueField as $fieldId => $rowDataValue) {
            $rowData[$numberFields] = array(
                'value' => $view->field[$fieldId]->getValue($row),
                'label_field' => $view->field[$labelField]->getValue($row),
                'label' => $view->field[$fieldId]->label(),
                'color' => $color[$fieldId],
            );
            $numberFields++;
        }
        $data[$id] = $rowData;
    }*/
    $data = Util::viewsData($view, $valueField, $labelField, $color);

    //$data = array_merge($data, $dataAttachment);
    /*$categories = array();
    $seriesData = array();

    for ($i = 0; $i < count($data[0]); $i++){

        $seriesRowData = array('name' => '','color' => '', 'data' => array());
        for($j = 0; $j < count($data); $j++) {
            $categories[$j] = $data[$j][$i]['label_field'];
            $seriesRowData['name'] = $data[$j][$i]['label'];
            $seriesRowData['color'] = $data[$j][$i]['color'];
            array_push($seriesRowData['data'],((int)($data[$j][$i]['value'])));
        }
        array_push($seriesData, $seriesRowData);
    }*/
    $data = Util::createChartableData($data);
    $categories = $data[0];
    $seriesData = $data[1];

    $seriesData = array_merge($seriesData, $seriesDataAttachment);
    drupal_set_message(json_encode($seriesData).' Merged data');
    $service = \Drupal::service('charts.charts_service');
    $service->setLibrarySelected($view->style_plugin->options['library']);

    //Handles the toggling from one library to another
    switch($library){
        case 'google':
            $googleData = renderGoogleCharts($categories, $seriesData);
            $googleOptions = createGoogleChartsOptions($options, $seriesData);
            $googleChartType = createGoogleChartType($options);
            $googleAttributes = array(
                'id'=>'chart',
                'class' => 'chart-google',
                'data-chart' => $googleData,
                'google-options'=> json_encode($googleOptions),
                'google-chart-type' => json_encode($googleChartType),
            );
            $attributes = new Attribute($googleAttributes);
            return '<div ' . $attributes . '></div>';

        case 'highcharts':
            $highchart = renderHigchartsCharts($options, $categories, $seriesData);
            $highchartAttributes = array(
                'class' => 'charts-highchart',
                'data-chart' => json_encode($highchart)
            );
            $attributes = new Attribute($highchartAttributes);
            return '<div ' . $attributes . '></div>';

        case 'c3':
            $c3 = renderC3Charts($options, $categories, $seriesData);
            $c3chartAttributes = array(
                'class' => 'charts-c3',
                'data-chart' => json_encode($c3)
            );
            $c3attributes = new Attribute($c3chartAttributes);
            return '<div ' . $c3attributes . ' id="chart"></div>';

        default:
            //Not handled
    }
}