<?php
/**
 * @file
 * Charts module file that provides hook_theme.
 */
use \Drupal\Core\Template\Attribute;
use \Drupal\charts\util\Util;

// Store Charts preprocess theme functions in a separate .inc file.
\Drupal::moduleHandler()->loadInclude('charts', 'inc', 'charts.theme');

/**
* Implements hook_theme().
* @param $existing
* @param $type
* @param $theme
* @param $path
* @return array
*/
function charts_theme($existing, $type, $theme, $path) {

  return array(
    'views_view_charts' => array(
      'variables' => array('view' => NULL, 'row' => NULL),
    )
  );
}

function theme_views_view_charts($variables){

    $options = $variables['view']->style_plugin->options;

    $service = \Drupal::service('charts.charts_attachment');
    $attachmentView = $service->getAttachmentView();

    $view = $variables['view'];
    $library = $view->style_plugin->options['library'];
    $variables['data'] = array();

    $viewId = $view->display_handler->display['id'];

    // get id of chart extension
    $attachmentId = $attachmentView->display_handler->display['id'];
    // gets chart extension
    $attachmentDisplay = $view->storage->getDisplay($attachmentId);

    $attachedValueField = $attachmentDisplay['display_options']['style']['options']['data_fields'];
    $combinedAttachmentPage = Util::removeUnselectedFields($attachedValueField);

    $labelField = $view->style_plugin->options['label_field'];
    $valueField = $view->style_plugin->options['data_fields'];

    $valueField = Util::removeUnselectedFields($valueField);

    $color = $view->style_plugin->options['field_colors'];
    $attachmentColor = $attachmentView->style_plugin->options['field_colors'];

    $dataAttachment = Util::viewsData($attachmentView, $combinedAttachmentPage, $labelField, $attachmentColor);
    $dataAttachment = Util::createChartableData($dataAttachment);
    $categoriesAttachment = $dataAttachment[0];
    $seriesDataAttachment = $dataAttachment[1];
    drupal_set_message(json_encode($categoriesAttachment).' attachment category data');
    drupal_set_message(json_encode($seriesDataAttachment).' attachment series data');

    $data = Util::viewsData($view, $valueField, $labelField, $color);

    $data = Util::createChartableData($data);
    $categories = $data[0];
    $seriesData = $data[1];

    $categories = array_merge($categories, $categoriesAttachment);
    drupal_set_message(json_encode($categories).' categories');
    $seriesData = array_merge($seriesData, $seriesDataAttachment);
    drupal_set_message(json_encode($seriesData).' Merged data');
    $service = \Drupal::service('charts.charts_service');
    $service->setLibrarySelected($view->style_plugin->options['library']);

    //Handles the toggling from one library to another
    switch($library){
        case 'google':
            $googleData = renderGoogleCharts($categories, $seriesData);
            $googleOptions = createGoogleChartsOptions($options, $seriesData);
            $googleChartType = createGoogleChartType($options);
            $googleAttributes = array(
                'id'=>'chart',
                'class' => 'chart-google',
                'data-chart' => $googleData,
                'google-options'=> json_encode($googleOptions),
                'google-chart-type' => json_encode($googleChartType),
            );
            $attributes = new Attribute($googleAttributes);
            return '<div ' . $attributes . '></div>';

        case 'highcharts':
            $highchart = renderHigchartsCharts($options, $categories, $seriesData);
            $highchartAttributes = array(
                'class' => 'charts-highchart',
                'data-chart' => json_encode($highchart)
            );
            $attributes = new Attribute($highchartAttributes);
            return '<div ' . $attributes . '></div>';

        case 'c3':
            $c3 = renderC3Charts($options, $categories, $seriesData);
            $c3chartAttributes = array(
                'class' => 'charts-c3',
                'data-chart' => json_encode($c3)
            );
            $c3attributes = new Attribute($c3chartAttributes);
            return '<div ' . $c3attributes . ' id="chart"></div>';

        default:
            //Not handled
    }
}